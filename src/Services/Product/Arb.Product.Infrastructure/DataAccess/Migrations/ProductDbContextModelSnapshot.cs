// <auto-generated />
using System;
using Arb.Product.Infrastructure.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Arb.Product.Infrastructure.DataAccess.Migrations
{
    [DbContext(typeof(ProductDbContext))]
    partial class ProductDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Arb.Product.Core.MarketPlace", b =>
                {
                    b.Property<int>("MarketPlaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MarketPlaceId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<string>("MarketPlaceName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer");

                    b.HasKey("MarketPlaceId");

                    b.ToTable("MarketPlaces", "Product");
                });

            modelBuilder.Entity("Arb.Product.Core.MarketPlaceCategory", b =>
                {
                    b.Property<int>("MarketPlaceId")
                        .HasColumnType("integer");

                    b.Property<int>("MarketPlaceCategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("HierarchyPath")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<bool>("Leaf")
                        .HasColumnType("boolean");

                    b.Property<int?>("MarketPlaceMainCategoryId")
                        .HasColumnType("integer");

                    b.Property<int?>("MarketPlaceParentCategoryId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("MarketPlaceId", "MarketPlaceCategoryId");

                    b.HasIndex("MarketPlaceId", "MarketPlaceParentCategoryId");

                    b.ToTable("MarketPlaceCategories", "Product");
                });

            modelBuilder.Entity("Arb.Product.Core.MarketPlaceMerchant", b =>
                {
                    b.Property<int>("MarketPlaceId")
                        .HasColumnType("integer");

                    b.Property<int>("MarketPlaceMerchantId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FrontStoreLink")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<string>("MerchantName")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("MarketPlaceId", "MarketPlaceMerchantId");

                    b.ToTable("MarketPlaceMerchants", "Product");
                });

            modelBuilder.Entity("Arb.Product.Core.MarketPlaceProduct", b =>
                {
                    b.Property<int>("MarketPlaceId")
                        .HasColumnType("integer");

                    b.Property<int>("MarketPlaceProductId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MarketPlaceCategoryId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<string>("ProductImageLink")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("ProductLink")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("MarketPlaceId", "MarketPlaceProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("MarketPlaceProducts", "Product");
                });

            modelBuilder.Entity("Arb.Product.Core.MarketPlaceProductSale", b =>
                {
                    b.Property<int>("MarketPlaceProductSaleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MarketPlaceProductSaleId"));

                    b.Property<decimal>("BuyBox")
                        .HasColumnType("numeric");

                    b.Property<int>("CategorySalesRank")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MainCategorySalesRank")
                        .HasColumnType("integer");

                    b.Property<int>("MarketPlaceId")
                        .HasColumnType("integer");

                    b.Property<int>("MarketPlaceProductId")
                        .HasColumnType("integer");

                    b.Property<int?>("PeriodSalesCount")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("MarketPlaceProductSaleId");

                    b.HasIndex("MarketPlaceId", "MarketPlaceProductId");

                    b.ToTable("MarketPlaceProductSales", "Product");
                });

            modelBuilder.Entity("Arb.Product.Core.MarketPlaceProductSaleMerchant", b =>
                {
                    b.Property<int>("MarketPlaceProductSaleMerchantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MarketPlaceProductSaleMerchantId"));

                    b.Property<bool>("BuyBox")
                        .HasColumnType("boolean");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MarketPlaceId")
                        .HasColumnType("integer");

                    b.Property<int>("MarketPlaceMerchantId")
                        .HasColumnType("integer");

                    b.Property<int>("MarketPlaceProductSaleId")
                        .HasColumnType("integer");

                    b.Property<int?>("MerchantTotalSaleCount")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int?>("Stock")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("MarketPlaceProductSaleMerchantId");

                    b.HasIndex("MarketPlaceProductSaleId");

                    b.HasIndex("MarketPlaceId", "MarketPlaceMerchantId");

                    b.ToTable("MarketPlaceProductSaleMerchants", "Product");
                });

            modelBuilder.Entity("Arb.Product.Core.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProductId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("ProductCodeType")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer");

                    b.HasKey("ProductId");

                    b.HasIndex("ProductCodeType", "ProductCode")
                        .IsUnique();

                    b.ToTable("Products", "Product");
                });

            modelBuilder.Entity("ArbTech.Infrastructure.Messaging.Outbox.IntegrationEventLogEntry", b =>
                {
                    b.Property<Guid>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EventTypeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<int>("TimesSent")
                        .HasColumnType("integer");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uuid");

                    b.HasKey("EventId");

                    b.ToTable("IntegrationEventLogs", (string)null);
                });

            modelBuilder.Entity("Arb.Product.Core.MarketPlaceCategory", b =>
                {
                    b.HasOne("Arb.Product.Core.MarketPlace", null)
                        .WithMany("MarketPlaceCategories")
                        .HasForeignKey("MarketPlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Arb.Product.Core.MarketPlaceCategory", "ParentCategory")
                        .WithMany("ChildrenCategories")
                        .HasForeignKey("MarketPlaceId", "MarketPlaceParentCategoryId");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("Arb.Product.Core.MarketPlaceMerchant", b =>
                {
                    b.HasOne("Arb.Product.Core.MarketPlace", null)
                        .WithMany("MarketPlaceMerchants")
                        .HasForeignKey("MarketPlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Arb.Product.Core.MarketPlaceProduct", b =>
                {
                    b.HasOne("Arb.Product.Core.MarketPlace", null)
                        .WithMany("MarketPlaceProducts")
                        .HasForeignKey("MarketPlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Arb.Product.Core.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Arb.Product.Core.MarketPlaceProductSale", b =>
                {
                    b.HasOne("Arb.Product.Core.MarketPlaceProduct", null)
                        .WithMany("MarketPlaceProductSales")
                        .HasForeignKey("MarketPlaceId", "MarketPlaceProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Arb.Product.Core.MarketPlaceProductSaleMerchant", b =>
                {
                    b.HasOne("Arb.Product.Core.MarketPlaceProductSale", null)
                        .WithMany("MarketPlaceProductMerchants")
                        .HasForeignKey("MarketPlaceProductSaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Arb.Product.Core.MarketPlaceMerchant", null)
                        .WithMany()
                        .HasForeignKey("MarketPlaceId", "MarketPlaceMerchantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Arb.Product.Core.MarketPlace", b =>
                {
                    b.Navigation("MarketPlaceCategories");

                    b.Navigation("MarketPlaceMerchants");

                    b.Navigation("MarketPlaceProducts");
                });

            modelBuilder.Entity("Arb.Product.Core.MarketPlaceCategory", b =>
                {
                    b.Navigation("ChildrenCategories");
                });

            modelBuilder.Entity("Arb.Product.Core.MarketPlaceProduct", b =>
                {
                    b.Navigation("MarketPlaceProductSales");
                });

            modelBuilder.Entity("Arb.Product.Core.MarketPlaceProductSale", b =>
                {
                    b.Navigation("MarketPlaceProductMerchants");
                });
#pragma warning restore 612, 618
        }
    }
}
